package myavocat.legit.dto;

import lombok.Getter;
import lombok.Setter;
import myavocat.legit.model.ModePaiement;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.Size;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.UUID;

@Getter
@Setter
public class PaiementDTO {

    private UUID id;

    @NotNull(message = "L'ID de la facture est obligatoire")
    private UUID factureId;

    @NotNull(message = "Le montant est obligatoire")
    @Positive(message = "Le montant doit √™tre positif")
    private BigDecimal montant;

    @NotNull(message = "La date de paiement est obligatoire")
    private LocalDate datePaiement;

    private ModePaiement modePaiement;

    @Size(max = 100, message = "La r√©f√©rence ne peut pas d√©passer 100 caract√®res")
    private String reference;

    @Size(max = 500, message = "Les notes ne peuvent pas d√©passer 500 caract√®res")
    private String notes;

    // üî• INFORMATIONS DE LA FACTURE ASSOCI√âE (lecture seule)
    private String factureNumero;
    private String factureIntitule;
    private String clientNom;
    private String clientPrenom;

    // üî• M√âTADONN√âES
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;

    // üî• CONSTRUCTEUR COMPLET (pour les r√©ponses API compl√®tes)
    public PaiementDTO(UUID id, UUID factureId, BigDecimal montant, LocalDate datePaiement,
                       ModePaiement modePaiement, String reference, String notes,
                       String factureNumero, String factureIntitule, String clientNom, String clientPrenom,
                       LocalDateTime createdAt, LocalDateTime updatedAt) {
        this.id = id;
        this.factureId = factureId;
        this.montant = montant;
        this.datePaiement = datePaiement;
        this.modePaiement = modePaiement;
        this.reference = reference;
        this.notes = notes;
        this.factureNumero = factureNumero;
        this.factureIntitule = factureIntitule;
        this.clientNom = clientNom;
        this.clientPrenom = clientPrenom;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    // üî• CONSTRUCTEUR SIMPLE (pour la cr√©ation de paiements)
    public PaiementDTO(UUID factureId, BigDecimal montant, LocalDate datePaiement, ModePaiement modePaiement) {
        this.factureId = factureId;
        this.montant = montant;
        this.datePaiement = datePaiement;
        this.modePaiement = modePaiement;
    }

    // üî• CONSTRUCTEUR VIDE (pour la d√©s√©rialisation JSON)
    public PaiementDTO() {}

    // üî• M√âTHODES UTILES POUR L'AFFICHAGE

    /**
     * Retourne une description lisible du paiement
     */
    public String getDescription() {
        StringBuilder desc = new StringBuilder();
        desc.append(montant).append("‚Ç¨");

        if (modePaiement != null) {
            desc.append(" (").append(getModePaiementAffichage()).append(")");
        }

        if (reference != null && !reference.trim().isEmpty()) {
            desc.append(" - R√©f: ").append(reference);
        }

        return desc.toString();
    }

    /**
     * Mode de paiement avec affichage fran√ßais
     */
    public String getModePaiementAffichage() {
        if (modePaiement == null) return "Non sp√©cifi√©";

        return switch (modePaiement) {
            case VIREMENT -> "Virement";
            case CHEQUE -> "Ch√®que";
            case ESPECES -> "Esp√®ces";
            case CB -> "Carte bancaire";
            case AUTRES -> "Autres";
            default -> modePaiement.name();
        };
    }

    /**
     * Client complet (nom + pr√©nom)
     */
    public String getClientComplet() {
        if (clientNom == null && clientPrenom == null) {
            return "Client non sp√©cifi√©";
        }
        return (clientPrenom != null ? clientPrenom + " " : "") +
                (clientNom != null ? clientNom : "");
    }

    /**
     * Date format√©e pour l'affichage
     */
    public String getDatePaiementFormatee() {
        if (datePaiement == null) return "";
        return datePaiement.format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy"));
    }

    /**
     * Montant format√© avec devise
     */
    public String getMontantFormate() {
        if (montant == null) return "0,00 ‚Ç¨";
        return String.format("%.2f ‚Ç¨", montant);
    }

    /**
     * V√©rifie si le paiement a une r√©f√©rence
     */
    public boolean hasReference() {
        return reference != null && !reference.trim().isEmpty();
    }

    /**
     * V√©rifie si le paiement a des notes
     */
    public boolean hasNotes() {
        return notes != null && !notes.trim().isEmpty();
    }

    /**
     * Retourne un r√©sum√© court du paiement pour les listes
     */
    public String getResume() {
        return String.format("%s - %s (%s)",
                getMontantFormate(),
                getDatePaiementFormatee(),
                getModePaiementAffichage());
    }

    @Override
    public String toString() {
        return "PaiementDTO{" +
                "id=" + id +
                ", factureId=" + factureId +
                ", montant=" + montant +
                ", datePaiement=" + datePaiement +
                ", modePaiement=" + modePaiement +
                ", reference='" + reference + '\'' +
                '}';
    }
}
